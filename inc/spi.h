////////////////////////////////////////////////////////////////////////////////
/// @file
/// @brief Serial Peripheral Interface (SPI) driver.
////////////////////////////////////////////////////////////////////////////////

#ifndef SPI_H_
#define SPI_H_

// *****************************************************************************
// ************************** System Include Files *****************************
// *****************************************************************************

#include <xc.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

// *****************************************************************************
// ************************** User Include Files *******************************
// *****************************************************************************

// *****************************************************************************
// ************************** Defines ******************************************
// *****************************************************************************

#define mSPI2_SS_SET()  (LATGCLR = _LATG_LATG9_MASK)    // Assert select.
#define mSPI2_SS_CLR()  (LATGSET = _LATG_LATG9_MASK)    // Deassert select.

typedef enum {
    SPI_PORT_SPI2 = 2,
} SPI_PORT;

typedef struct {
    SPI_PORT        port;
    uint8_t         *rxBuf;
    uint8_t         *txBuf;
    unsigned int    length;
    unsigned int    xferDone;
} SPI_XFER;

// *****************************************************************************
// ************************** Declarations *************************************
// *****************************************************************************

// *****************************************************************************
// ************************** Function Prototypes ******************************
// *****************************************************************************

////////////////////////////////////////////////////////////////////////////////
/// @brief  This function services the SPI module.
///
/// This function manages the SPI transfer to determining transfer completion.
////////////////////////////////////////////////////////////////////////////////
void SPITask( void );

////////////////////////////////////////////////////////////////////////////////
/// @brief  Transfer SPI data.
///
/// @param  xfer
///             Buffer of control and communication data for transfer.
///
/// @return Status of transfer queue attempt.
///             0 - Success.
///             1 - Failure.
///
/// This function queues SPI data for subsequent transfer.
////////////////////////////////////////////////////////////////////////////////
int SPIXfer(SPI_XFER *xfer);

#endif  // SPI_H_
